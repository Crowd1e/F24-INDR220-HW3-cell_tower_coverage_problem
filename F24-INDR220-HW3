
import numpy as np
import scipy.sparse as sp
import cplex as cp

def mixed_integer_linear_programming(direction, A, senses, b, c, l, u, types, names):
    # create an empty optimization problem
    prob = cp.Cplex()

    # add decision variables to the problem including their coefficients in objective and ranges
    prob.variables.add(obj = c.tolist(), lb = l.tolist(), ub = u.tolist(), types = types.tolist(), names = names.tolist())

    # define problem type
    if direction == "maximize":
        prob.objective.set_sense(prob.objective.sense.maximize)
    else:
        prob.objective.set_sense(prob.objective.sense.minimize)

    # add constraints to the problem including their directions and right-hand side values
    prob.linear_constraints.add(senses = senses.tolist(), rhs = b.tolist())

    # add coefficients for each constraint
    row_indices, col_indices = A.nonzero()
    prob.linear_constraints.set_coefficients(zip(row_indices.tolist(), col_indices.tolist(), A.data.tolist()))

    print(prob.write_as_string())
    # solve the problem
    prob.solve()
    
    # check the solution status
    print(prob.solution.get_status())
    print(prob.solution.status[prob.solution.get_status()])

    # get the solution
    x_star = prob.solution.get_values()
    obj_star = prob.solution.get_objective_value()

    return(x_star, obj_star)

def cell_tower_coverage_problem(populations_file, T):
    # your implementation starts below
    populations = np.loadtxt(populations_file).astype(int)
    H = populations.shape[0]
    W = populations.shape[1]


    c = np.concatenate((np.zeros(H * W),populations.flatten()))
    b = np.concatenate((np.zeros(H * W), [T]))
    senses = np.concatenate((np.full(H * W, "G"), ["L"]))
    l = np.zeros(2 * H * W)
    u = np.ones(2 * H * W)
    types = np.full(2 * H * W, "B")
    names = np.concatenate((np.array([f"x_{h}_{w}" for h in range(1, H + 1) for w in range(1, W + 1)]),
                            np.array([f"y_{h}_{w}" for h in range(1, H + 1) for w in range(1, W + 1)])))

    data, row, col = [], [], []

    # 1st part: Main A matrix, selecting neighbours, finding column indexes, appending row, col, data values.
    for i in range(H):
        for j in range(W):
            for di, dj in [(0, 0), (-1, 0), (1, 0), (0, -1), (0, 1)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < H and 0 <= nj < W:
                    x_index = ni * W + nj
                    row.append(i * W + j)
                    col.append(x_index)
                    data.append(1)
    
    # 2nd part: Daigonally appending -1 * y{ij]
    for i in range(H):
        for j in range(W):
            y_index = H * W + i * W + j
            row.append(i * W + j)
            col.append(y_index)
            data.append(-1)
            

    
    # 3rd part: All x variables summed up, =< T
    for x_index in range(H * W):
        row.append(H * W)
        col.append(x_index)
        data.append(1)
    
    A = sp.csr_matrix((data, (row, col)), shape=(H * W + 1, 2 * H * W))
    X_star, Obj_star = mixed_integer_linear_programming("maximize", A, senses, b, c, l, u, types, names)
    # your implementation ends above
    return X_star

X_star = cell_tower_coverage_problem("populations.txt", 3)
print(X_star)
